plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.jlink' version '2.24.1'
    id "com.github.johnrengelman.shadow" version "latest.release"
    id "com.gluonhq.gluonfx-gradle-plugin" version "1.0.12"
}

group 'io.github.winterreisender.ezzenmode'
version '1-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.8.1'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'io.github.winterreisender.ezzenmode'
    mainClass = 'io.github.winterreisender.ezzenmode.MainApplicationKt'
}

[compileKotlin, compileTestKotlin].forEach {
    it.kotlinOptions {
        jvmTarget = '17'
    }
}

javafx {
    version = '17.0.2'
    modules = ['javafx.controls', 'javafx.fxml'] //,'javafx.web'
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}

application {
    applicationName = "EzZenMode"
    mainModule.set("io.github.winterreisender.ezzenmode")
    mainClass.set("io.github.winterreisender.ezzenmode.MainApplicationKt")
    applicationDefaultJvmArgs = [
            "-XX:+UseZGC",
            "-XX:+ShowCodeDetailsInExceptionMessages",
            "-Dsun.java2d.opengl=true",
            "-Dhttps.protocols=TLSv1.1,TLSv1.2",
    ]
}

jlink {
    options.set(List.of("--strip-debug", "--compress", "2", "--no-header-files", "--no-man-pages"))
    addExtraDependencies("javafx")
    launcher {
        name = 'app'
    }
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip") as RegularFile

    jpackage {
        outputDir = "jpackage"
        imageName = "EzZenMode"
        skipInstaller = false
        installerName = application.applicationName
        appVersion = "1.0.2"

        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            installerType = 'msi'
            icon = "src/main/resources/application.ico"
            installerOptions += ["--win-dir-chooser", "--win-menu", "--win-shortcut"]
        }
        if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
            icon = "src/main/resources/application.png" // use icns file format if really build mac os version
        }
        if (org.gradle.internal.os.OperatingSystem.current().linux) {
            icon = "src/main/resources/application.png"
            installerType = "deb"
            installerOptions += ["--linux-deb-maintainer", "winterreisender@foxmail.com", "--linux-menu-group", application.applicationName, "--linux-shortcut"]
        }
    }
}

gluonfx {
    compilerArgs = [
            "--allow-incomplete-classpath"
    ]
}

jlinkZip {
    group = 'distribution'
}

shadowJar {
    zip64 true
    manifest {
        attributes 'Main-Class': 'MainKt'
    }
}

